<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://warscodev.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://warscodev.github.io/" rel="alternate" type="text/html" /><updated>2024-01-09T14:12:02+09:00</updated><id>https://warscodev.github.io/feed.xml</id><title type="html">WarscoDev의 개발 블로그</title><subtitle>warscodev의 개발 블로그입니다.</subtitle><author><name>warscodev</name><email>warscodev@gmail.com</email></author><entry><title type="html">동기화와(Synchronization)와 교착상태(Deadlock)</title><link href="https://warscodev.github.io/computer-science/%EB%8F%99%EA%B8%B0%ED%99%94%EC%99%80-synchronization-%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-deadlock" rel="alternate" type="text/html" title="동기화와(Synchronization)와 교착상태(Deadlock)" /><published>2023-08-29T00:00:00+09:00</published><updated>2023-08-29T00:00:00+09:00</updated><id>https://warscodev.github.io/computer-science/%EB%8F%99%EA%B8%B0%ED%99%94%EC%99%80(Synchronization)-%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C(Deadlock)</id><content type="html" xml:base="https://warscodev.github.io/computer-science/%EB%8F%99%EA%B8%B0%ED%99%94%EC%99%80-synchronization-%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C-deadlock"><![CDATA[<blockquote>
  <p>💡 동기화와 데드락은 공유 자원을 사용하는 프로세스나 스레드 간의 상호 작용에서 중요한 개념들이다. 동기화를 통해 여러 프로세스나 스레드가 공유 자원을 안전하게 접근하도록 도와주지만, 잘못된 동기화는 데드락을 일으킬 수 있다.</p>
</blockquote>

<h1 id="동기화-synchronization"><strong>동기화 (Synchronization)</strong></h1>

<hr />

<h2 id="동기화란"><strong>동기화란?</strong></h2>

<p>여러 프로세스나 스레드가 공유 자원에 동시에 접근할 때 발생할 수 있는 문제를 방지하기 위해 그들 사이의 실행 순서를 조절하는 것을 말한다.</p>

<h2 id="동기화의-필요성"><strong>동기화의 필요성</strong></h2>

<ul>
  <li>여러 프로세스나 스레드가 공유 자원에 동시에 접근할 때 데이터의 일관성을 유지하기 위해 필요하다.</li>
  <li>동시성 제어 없이 공유 자원을 동시에 변경하면 예기치 않은 결과나 오류가 발생할 수 있다.</li>
</ul>

<h2 id="동기화-기법"><strong>동기화 기법</strong></h2>

<h3 id="1-임계-구역-critical-section"><strong>1. 임계 구역 (Critical Section)</strong></h3>

<ul>
  <li><strong>설명:</strong> 여러 프로세스가 동시에 접근하면 안 되는 공유 자원을 접근하는 코드 부분.</li>
  <li><strong>예시:</strong> 두 스레드가 동시에 은행 계좌 잔액을 변경할 때 해당 코드 부분.</li>
</ul>

<h3 id="2-뮤텍스-mutex"><strong>2. 뮤텍스 (Mutex)</strong></h3>

<ul>
  <li><strong>설명:</strong> 임계 구역에 하나의 스레드만 들어갈 수 있도록 보장하는 동기화 기법.</li>
  <li><strong>예시:</strong> 파일을 한 번에 하나의 프로세스만 쓸 수 있도록 제한하는 경우.</li>
</ul>

<h3 id="3-세마포어-semaphore"><strong>3. 세마포어 (Semaphore)</strong></h3>

<ul>
  <li><strong>설명:</strong> 동시에 접근할 수 있는 스레드나 프로세스의 최대 허용 수를 제한하는 동기화 기법.</li>
  <li><strong>예시:</strong> 동시에 3개의 스레드만 데이터베이스에 쓸 수 있도록 제한하는 경우.</li>
</ul>

<h3 id="4-모니터-monitor"><strong>4. 모니터 (Monitor)</strong></h3>

<ul>
  <li><strong>설명:</strong> 뮤텍스와 조건 변수를 결합하여 임계 구역을 보호하는 높은 수준의 동기화 기법.</li>
  <li><strong>예시:</strong> 한 스레드가 데이터를 추가하면 다른 스레드가 그 데이터를 처리하는 경우.</li>
</ul>

<h2 id="레이스-컨디션-race-condition"><strong>레이스 컨디션 (Race Condition)</strong></h2>

<ul>
  <li><strong>설명:</strong> 두 개 이상의 스레드가 공유 자원을 동시에 변경하려고 할 때 발생하는 상황.</li>
  <li><strong>예시:</strong> 두 스레드가 동시에 은행 계좌 잔액을 조회하고 변경할 때 잔액이 잘못된 값으로 설정되는 경우.</li>
</ul>

<p>동기화는 복잡한 환경에서 여러 프로세스나 스레드가 원활하게 작동하도록 하는 중요한 개념이다. 잘못된 동기화는 시스템 성능 저하나 데이터 손실과 같은 큰 문제를 일으킬 수 있다.</p>

<p><br /><br /></p>

<h1 id="교착상태-deadlock">교착상태 (Deadlock)</h1>

<hr />

<h2 id="교착상태란"><strong>교착상태란?</strong></h2>

<p>여러 개의 프로세스나 스레드가 서로를 기다리며 무한히 대기하는 상황을 뜻한다.</p>

<h2 id="교착상태의-조건"><strong>교착상태의 조건</strong></h2>

<p>교착상태의 발생에는 다음의 4가지 필요 충분 조건이 있다</p>

<h3 id="1-상호배제-mutual-exclusion"><strong>1. 상호배제 (Mutual Exclusion)</strong></h3>

<ul>
  <li><strong>설명</strong>: 한 번에 한 프로세스만이 특정 자원을 사용할 수 있다.</li>
  <li><strong>예시</strong>: 프린터는 한 번에 하나의 작업만 처리할 수 있습니다. 따라서 두 개의 프로세스가 동시에 프린터를 사용하려고 시도하면 상호배제 조건이 위반된다.</li>
</ul>

<h3 id="2-점유와-대기-hold-and-wait"><strong>2. 점유와 대기 (Hold and Wait)</strong></h3>

<ul>
  <li><strong>설명</strong>: 프로세스가 이미 어떤 자원을 보유하고 있으면서 다른 자원을 기다릴 때 발생한다.</li>
  <li><strong>예시</strong>: 프로세스 A가 파일을 보유하면서 프린터를 기다리고, 프로세스 B가 그 프린터를 보유하면서 해당 파일을 기다리는 상황.</li>
</ul>

<h3 id="3-비선점-no-preemption"><strong>3. 비선점 (No Preemption)</strong></h3>

<ul>
  <li><strong>설명</strong>: 자원이 한 프로세스에 의해 점유되어 있을 때, 다른 프로세스가 그 자원을 강제로 뺏어오지 못한다.</li>
  <li><strong>예시</strong>: 프로세스 A가 데이터베이스 연결을 사용 중일 때, 프로세스 B는 A로부터 그 연결을 강제로 가져올 수 없다.</li>
</ul>

<h3 id="4-환형-대기-circular-wait"><strong>4. 환형 대기 (Circular Wait)</strong></h3>

<ul>
  <li><strong>설명</strong>: 각 프로세스는 순차적으로 다음 프로세스가 요청한 자원을 보유하고 있다.</li>
  <li><strong>예시</strong>: 프로세스 A는 메모리를 보유하면서 디스크를 기다리고, 프로세스 B는 디스크를 보유하면서 네트워크 연결을 기다리고, 프로세스 C는 네트워크 연결을 보유하면서 메모리를 기다리는 상황.</li>
</ul>

<p>이 네 가지 조건 중 어느 하나라도 만족되지 않으면 교착상태는 발생하지 않는다.</p>

<h2 id="교착상태-해결-방법"><strong>교착상태 해결 방법</strong></h2>

<h3 id="1-예방-deadlock-prevention">1. <strong>예방 (Deadlock Prevention)</strong></h3>

<ul>
  <li><strong>설명:</strong> 교착상태의 4가지 조건 중 하나 이상을 무효화시켜 교착상태가 발생하지 않도록 하는 방법</li>
  <li><strong>예시:</strong>
    <ul>
      <li>상호배제: 이 조건을 제거하기 위해 프린터와 같은 공유 자원에 대해 동시 접근을 허용하는 방식으로 디자인할 수 있습니다. 하지만, 이는 자원의 특성에 따라 불가능할 수도 있다.</li>
      <li>점유와 대기: 프로세스가 실행되기 전에 모든 필요한 자원을 한 번에 요청하도록 하여 이 조건을 제거할 수 있다.</li>
      <li>환형 대기: 자원에 순번을 부여하고, 프로세스가 순서대로 자원을 요청하도록 함으로써 이 조건을 제거할 수 있다.</li>
    </ul>
  </li>
</ul>

<h3 id="2-회피-deadlock-avoidance">2. <strong>회피 (Deadlock Avoidance)</strong></h3>

<ul>
  <li><strong>설명:</strong> 시스템의 상태를 검사하여 교착상태가 발생할 가능성이 있을 때 해당 작업을 거부하는 방법</li>
  <li><strong>예시:</strong>
    <ul>
      <li><strong>Banker’s Algorithm</strong>: 각 프로세스가 필요로 하는 최대 자원을 미리 알려주고, 시스템은 안전한 상태를 유지하기 위해 자원 할당 여부를 결정한다.</li>
    </ul>
  </li>
</ul>

<h3 id="3-탐지-및-복구-deadlock-detection--recovery">3. <strong>탐지 및 복구 (Deadlock Detection &amp; Recovery)</strong></h3>

<ul>
  <li><strong>설명:</strong> 교착상태가 발생했는지 시스템을 주기적으로 확인하고, 발견될 경우 복구하는 방법</li>
  <li><strong>예시:</strong>
    <ul>
      <li><strong>자원 할당 그래프</strong>: 주기적으로 그래프를 확인하여 사이클이 발생하는지 검사합니다. 사이클이 발견되면 교착상태가 발생한 것으로 간주한다.</li>
      <li><strong>복구 방법</strong>: 교착상태에 있는 프로세스를 종료하거나, 프로세스로부터 자원을 강제로 회수하여 교착상태를 해결한다.</li>
    </ul>
  </li>
</ul>

<h3 id="4-무시-deadlock-ignorance">4. <strong>무시 (Deadlock Ignorance)</strong></h3>

<ul>
  <li><strong>설명:</strong> 교착상태가 발생할 확률이 매우 낮다고 가정하고, 특별한 조치를 취하지 않는 방법</li>
  <li><strong>예시:</strong> 대부분의 운영체제는 교착상태가 발생할 확률이 낮다고 가정한다. 따라서 대부분의 경우 운영체제는 교착상태를 무시한다. 사용자는 문제가 발생할 경우 시스템을 재시작하거나 해당 프로세스를 수동으로 종료하여 문제를 해결한다.</li>
</ul>

<p>각 방법마다 장단점이 있으므로, 시스템의 특성과 요구사항에 따라 적절한 방법을 선택해야 한다.</p>

<p><br /><br /></p>

<h1 id="동기화와-데드락"><strong>동기화와 데드락</strong></h1>

<hr />

<h2 id="동기화와-데드락의-관계"><strong>동기화와 데드락의 관계</strong></h2>

<p>동기화는 여러 프로세스나 스레드가 공유 자원에 안전하게 접근할 수 있도록 도와주는 기법이다. 하지만, 동기화를 잘못 구현하면 데드락이 발생할 수 있다. 예를 들어, 두 프로세스가 서로 다른 뮤텍스를 잡고, 서로의 뮤텍스를 기다리는 상황이 발생하면 데드락이 발생한다.</p>

<h2 id="동기화-기법과-데드락"><strong>동기화 기법과 데드락</strong></h2>

<h3 id="1-임계-구역-critical-section-1"><strong>1. 임계 구역 (Critical Section)</strong></h3>

<ul>
  <li>데드락 위험: 임계 구역을 보호하기 위한 동기화 메커니즘이 잘못 구현되면 데드락 위험이 있다.</li>
</ul>

<h3 id="2-뮤텍스-mutex-1"><strong>2. 뮤텍스 (Mutex)</strong></h3>

<ul>
  <li>데드락 위험: 두 스레드나 프로세스가 서로의 뮤텍스를 기다리는 상황에서 데드락이 발생할 수 있다.</li>
</ul>

<h3 id="3-세마포어-semaphore-1"><strong>3. 세마포어 (Semaphore)</strong></h3>

<ul>
  <li>데드락 위험: 여러 세마포어를 사용할 때, 프로세스들이 서로 다른 순서로 세마포어를 요청하면 데드락이 발생할 수 있다.</li>
</ul>

<h3 id="4-모니터-monitor-1"><strong>4. 모니터 (Monitor)</strong></h3>

<ul>
  <li>데드락 위험: 모니터 내에서 여러 조건 변수를 사용하면서 잘못된 순서로 대기하게 되면 데드락이 발생할 수 있다.</li>
</ul>

<h2 id="동기화를-통한-데드락-해결"><strong>동기화를 통한 데드락 해결</strong></h2>

<p>동기화 기법 중 하나인 뮤텍스와 세마포어를 활용하여 데드락을 예방할 수 있다. 예를 들어, 여러 뮤텍스를 사용할 때 항상 일정한 순서로 뮤텍스를 획득하도록 설계하면 환형 대기 조건을 무효화시켜 데드락을 예방할 수 있습니다.</p>

<p><br /></p>

<hr />
<blockquote>
  <p>💡 동기화와 데드락은 서로 밀접한 관계가 있으며, 동기화를 통해 시스템의 동시성을 보장하면서도 데드락을 예방하거나 회피하는 것이 중요하다.</p>
</blockquote>

<p><br /></p>]]></content><author><name>warscodev</name><email>warscodev@gmail.com</email></author><category term="Computer Science" /><category term="Synchronization" /><category term="Deadlock" /><summary type="html"><![CDATA[💡 동기화와 데드락은 공유 자원을 사용하는 프로세스나 스레드 간의 상호 작용에서 중요한 개념들이다. 동기화를 통해 여러 프로세스나 스레드가 공유 자원을 안전하게 접근하도록 도와주지만, 잘못된 동기화는 데드락을 일으킬 수 있다.]]></summary></entry><entry><title type="html">[Git] 2. Git 최초 설정 및 프로젝트 세팅</title><link href="https://warscodev.github.io/vcs/git-%EC%B5%9C%EC%B4%88-%EC%84%A4%EC%A0%95-%EB%B0%8F-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%84%B8%ED%8C%85" rel="alternate" type="text/html" title="[Git] 2. Git 최초 설정 및 프로젝트 세팅" /><published>2023-05-25T00:00:00+09:00</published><updated>2023-05-25T00:00:00+09:00</updated><id>https://warscodev.github.io/vcs/Git%20%EC%B5%9C%EC%B4%88%20%EC%84%A4%EC%A0%95%20%EB%B0%8F%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%EC%84%B8%ED%8C%85</id><content type="html" xml:base="https://warscodev.github.io/vcs/git-%EC%B5%9C%EC%B4%88-%EC%84%A4%EC%A0%95-%EB%B0%8F-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%84%B8%ED%8C%85"><![CDATA[<p><br /></p>

<h1 id="1-git-전역-설정">1. Git 전역 설정</h1>
<hr />
<h2 id="11-사용자-이름-및-이메일-주소-설정">1.1 사용자 이름 및 이메일 주소 설정</h2>

<ul>
  <li>
    <p>터미널에서 아래 명령어 실행</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  git config <span class="nt">--global</span> user.name <span class="s2">"(본인 이름)"</span>
    
  git config <span class="nt">--global</span> user.email <span class="s2">"(본인 이메일)"</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>아래 명령어로 확인 가능</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  git config <span class="nt">--global</span> user.name
    
  git config <span class="nt">--global</span> user.email
</code></pre></div>    </div>

    <p><img src="/images/Git-최초-설정-및-프로젝트-세팅/Untitled.png" alt="Untitled" /></p>
  </li>
</ul>

<h2 id="12-기본-브랜치명-설정">1.2. 기본 브랜치명 설정</h2>

<ul>
  <li>
    <p>아래 명령어로 기본 브랜치명을 ‘main’으로 설정</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  git config <span class="nt">--global</span> init.defaultBranch main
</code></pre></div>    </div>
  </li>
  <li>
    <p>아래 명령어로 기본 브랜치명 확인</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  git config <span class="nt">--get</span> init.defaultBranch
</code></pre></div>    </div>

    <p><img src="/images/Git-최초-설정-및-프로젝트-세팅/Untitled 1.png" alt="Untitled" /></p>
  </li>
</ul>

<p><br /></p>

<h1 id="2-프로젝트-생성--git-관리-시작">2. 프로젝트 생성 &amp; Git 관리 시작</h1>

<h2 id="21-git-저장소-생성">2.1. Git 저장소 생성</h2>

<ul>
  <li>
    <p>프로젝트 경로 아래에서 아래 명령어 입력</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  git init
</code></pre></div>    </div>

    <p><img src="/images/Git-최초-설정-및-프로젝트-세팅/Untitled 2.png" alt="Untitled" /></p>

    <p><img src="/images/Git-최초-설정-및-프로젝트-세팅/Untitled 3.png" alt="폴더에 숨김모드로 .git 폴더 생성 확인" /></p>

    <p>폴더에 숨김모드로 .git 폴더 생성 확인</p>

    <ul>
      <li>맥에서 숨김 파일 보기: <code class="language-plaintext highlighter-rouge">command</code> + <code class="language-plaintext highlighter-rouge">shift</code> + <code class="language-plaintext highlighter-rouge">.</code></li>
    </ul>
  </li>
</ul>

<h2 id="22-git-저장소-상태">2.2. Git 저장소 상태</h2>

<ul>
  <li>
    <p>프로젝트에 아래 파일 생성</p>

    <p><img src="/images/Git-최초-설정-및-프로젝트-세팅/Untitled 4.png" alt="Untitled" /></p>
  </li>
  <li>
    <p>프로젝트 경로 아래에서 아래 명령어 입력</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  git status
</code></pre></div>    </div>

    <p><img src="/images/Git-최초-설정-및-프로젝트-세팅/Untitled 5.png" alt="Untitled" /></p>
  </li>
</ul>]]></content><author><name>warscodev</name><email>warscodev@gmail.com</email></author><category term="VCS" /><category term="Git" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">[Git] 1. 설치 및 세팅</title><link href="https://warscodev.github.io/vcs/git-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%84%B8%ED%8C%85" rel="alternate" type="text/html" title="[Git] 1. 설치 및 세팅" /><published>2023-05-25T00:00:00+09:00</published><updated>2023-05-25T00:00:00+09:00</updated><id>https://warscodev.github.io/vcs/Git-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%84%B8%ED%8C%85</id><content type="html" xml:base="https://warscodev.github.io/vcs/git-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%84%B8%ED%8C%85"><![CDATA[<blockquote>
  <p>💡 <strong>Git, Git Bash, SourceTree 설치 및 세팅</strong></p>
</blockquote>

<p><img src="/images/Git-설치-및-세팅/Untitled.png" alt="image1" /></p>

<hr />

<p><br /></p>

<h1 id="1-다운로드와-설치">1. 다운로드와 설치</h1>

<h2 id="11-git과-git-bash설치">1.1. Git과 Git Bash설치</h2>
<ul>
  <li><a href="https://git-scm.com/">https://git-scm.com/</a> 에서 다운로드</li>
  <li>
    <p><strong>Git Bash도 함께 설치할 것!</strong></p>

    <p><img src="/images/Git-설치-및-세팅/Untitled%201.png" alt="Untitled" /></p>
  </li>
  <li>
    <p>설치 후 Git Bash에서 테스트</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  git <span class="nt">--version</span>
</code></pre></div>    </div>

    <p><img src="/images/Git-설치-및-세팅/Untitled%202.png" alt="Untitled" /></p>
  </li>
  <li>
    <p>아래 명령어로 OS별 개행문자 통일 [<a href="https://director-joe.kr/89">참고</a>]</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  git config <span class="nt">--global</span> core.autocrlf <span class="nb">true</span>
</code></pre></div>    </div>

    <p><img src="/images/Git-설치-및-세팅/Untitled%203.png" alt="Untitled" /></p>
  </li>
</ul>

<p><br /></p>

<h2 id="12-sourcetree-설치">1.2. SourceTree 설치</h2>

<ul>
  <li><a href="https://www.sourcetreeapp.com/">https://www.sourcetreeapp.com/</a></li>
  <li>BitBucket, Mercurial 건너 뛰기</li>
</ul>

<p><br /></p>

<h2 id="13-인텔리제이-터미널-기본설정을-git-bash로-변경">1.3. 인텔리제이 터미널 기본설정을 Git Bash로 변경</h2>

<ul>
  <li><strong>Setting → Tools → Terminal</strong></li>
  <li>
    <p><strong>Shell path</strong>에 아래 경로 입력</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="s2">"C:</span><span class="se">\P</span><span class="s2">rogram Files</span><span class="se">\G</span><span class="s2">it</span><span class="se">\b</span><span class="s2">in</span><span class="se">\s</span><span class="s2">h.exe(shell이 설치된 경로)"</span> <span class="nt">-login</span> <span class="nt">-i</span>
</code></pre></div>    </div>

    <p><img src="/images/Git-설치-및-세팅/Untitled%204.png" alt="Untitled" /></p>
  </li>
  <li>
    <p>인텔리제이 재시작 후 터미널 확인</p>

    <p><img src="/images/Git-설치-및-세팅/Untitled%205.png" alt="Untitled" /></p>
  </li>
</ul>]]></content><author><name>warscodev</name><email>warscodev@gmail.com</email></author><category term="VCS" /><category term="Git" /><summary type="html"><![CDATA[💡 Git, Git Bash, SourceTree 설치 및 세팅]]></summary></entry><entry><title type="html">AD(Active Directory)</title><link href="https://warscodev.github.io/server/ad-active-directory" rel="alternate" type="text/html" title="AD(Active Directory)" /><published>2022-06-14T00:00:00+09:00</published><updated>2022-06-14T00:00:00+09:00</updated><id>https://warscodev.github.io/server/AD(Active-Directory)</id><content type="html" xml:base="https://warscodev.github.io/server/ad-active-directory"><![CDATA[<p>중앙 서버에 공통된 데이터베이스를 생성하여 각 서버와 클라이언트가 해당 데이터베이스를 공유하여 Object를 검색하고,</p>

<p>중앙에서 사용자 인증 및 권한 부여 처리가 가능하도록 처리해주는 Windows 기반의 <u>중앙 집중 관리 서비스</u>.</p>

<p>일반적인 RDBMS와는 다른 파일 타입의 데이터베이스이다.</p>

<h2 id="구성">구성</h2>

<h3 id="1-도메인domain">1. 도메인(Domain)</h3>

<p>관리를 위한 기본 단위. 동일한 데이터베이스를 공유하는 사용자와 디바이스가 이에 해당된다.</p>

<h3 id="2-트리tree-포레스트forest">2. 트리(Tree), 포레스트(Forest)</h3>

<p>트리는 도메인의 결합, 포레스트는 트리의 결합니다.</p>

<p><br /></p>]]></content><author><name>warscodev</name><email>warscodev@gmail.com</email></author><category term="Server" /><category term="AD" /><summary type="html"><![CDATA[중앙 서버에 공통된 데이터베이스를 생성하여 각 서버와 클라이언트가 해당 데이터베이스를 공유하여 Object를 검색하고,]]></summary></entry><entry><title type="html">IntelliJ에서 Thymeleaf 실시간 변경(Live reload) 적용하기</title><link href="https://warscodev.github.io/template-engine/intellij%EC%97%90%EC%84%9C-thymeleaf-%EC%8B%A4%EC%8B%9C%EA%B0%84-%EB%B3%80%EA%B2%BD-live-reload-%EC%A0%81%EC%9A%A9" rel="alternate" type="text/html" title="IntelliJ에서 Thymeleaf 실시간 변경(Live reload) 적용하기" /><published>2022-05-27T00:00:00+09:00</published><updated>2022-05-27T00:00:00+09:00</updated><id>https://warscodev.github.io/template-engine/IntelliJ%EC%97%90%EC%84%9C-Thymeleaf-%EC%8B%A4%EC%8B%9C%EA%B0%84-%EB%B3%80%EA%B2%BD(Live%20reload)-%EC%A0%81%EC%9A%A9</id><content type="html" xml:base="https://warscodev.github.io/template-engine/intellij%EC%97%90%EC%84%9C-thymeleaf-%EC%8B%A4%EC%8B%9C%EA%B0%84-%EB%B3%80%EA%B2%BD-live-reload-%EC%A0%81%EC%9A%A9"><![CDATA[<p>서버를 재구동 하지 않고 Thymeleaf의 변경사항을 실시간으로 적용하는 방법을 알아보자.</p>

<p><br /></p>

<h1 id="1-applicationyml-파일-thymeleaf-설정">1. application.yml 파일 thymeleaf 설정</h1>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spring</span>
    <span class="nl">thymeleaf:</span>
        <span class="nl">cache:</span> <span class="kc">false</span>
</code></pre></div></div>

<p><br /></p>

<h1 id="2-인텔리제이">2. 인텔리제이</h1>
<blockquote>
  <p><strong>1. Run → Edit Configurations (구성 편집)</strong></p>

  <p><img src="/images/스크린샷 2022-05-27 오후 1.29.17.png" width="520" alt="이미지1" /></p>

  <p><strong>2. On ‘Update’ action(‘Update’ 작업 시) &amp; On frame deactivation(프레임 비활성화 시) → Update classes and resources(클래스 및 리소스 업데이트)</strong></p>

  <p><img src="/images/스크린샷 2022-05-27 오후 1.33.00.png" width="520" alt="이미지2" /></p>

  <p><img src="/images/스크린샷 2022-05-27 오후 1.34.13.png" width="520" alt="이미지3" /></p>
</blockquote>

<p><br /></p>

<h2 id="정상적으로-적용된-모습"><strong>정상적으로 적용된 모습</strong></h2>

<p><img src="/images/May-27-2022 14-20-42.gif" alt="이미지4" /></p>]]></content><author><name>warscodev</name><email>warscodev@gmail.com</email></author><category term="Template Engine" /><category term="Thymeleaf" /><category term="IntelliJ" /><summary type="html"><![CDATA[서버를 재구동 하지 않고 Thymeleaf의 변경사항을 실시간으로 적용하는 방법을 알아보자.]]></summary></entry><entry><title type="html">Linked list</title><link href="https://warscodev.github.io/data-structure/linked-list" rel="alternate" type="text/html" title="Linked list" /><published>2022-05-22T00:00:00+09:00</published><updated>2022-05-22T00:00:00+09:00</updated><id>https://warscodev.github.io/data-structure/Linked-list</id><content type="html" xml:base="https://warscodev.github.io/data-structure/linked-list"><![CDATA[<ul>
  <li>컴퓨터에 자료를 저장하는 구조의 한 종류로, 엘리먼트와 엘리먼트 간의 연결(link)을 이용해서 리스트를 구현한 것이다.</li>
  <li>데이터를 저장한 노드에 다음 노드의 주소를 가지고 있는 구조.</li>
  <li>일렬로 연결된 데이터를 저장할 때 사용</li>
  <li>배열과 차이
    <ul>
      <li>배열 : 물리적으로 한 곳에 정해져 있음. 한번 정해진 크기는 고정.</li>
      <li>링크드 리스트 : <u>길이가 정해져있지 않은</u> 데이터의 연결된 집합</li>
    </ul>
  </li>
  <li>길이가 정해지지 않은 데이터를 핸들링 할 때 유리</li>
  <li>
    <p>※ 사실 오늘날 어플리케이션 프로그램에서 연결 리스트의 사용 빈도는 많이 줄었습니다.
그 이유는 하드웨어 발전이랑 관련이 있습니다. CPU에 들어가는 캐시 메모리는 연속된 메모리에 접근할 때 굉장히 빠른 속도를 보장합니다. 따라서 이 부분에 있어서 연결 리스트보다는 배열이 더 유리합니다. 그래서 연결 리스트보다는 다른 언어의 다른 자료구조가 더 활용되고 있는데 그 중 하나가 <strong>C#언어의 리스트</strong>입니다. 다른 말로 동적 배열입니다. 배열로 잡아두고 배열 크기가 커지면 크기만 바뀌는 개념입니다.
<br />ㄴ 출처: <a href="https://bite-sized-learning.tistory.com/239">https://bite-sized-learning.tistory.com/239</a></p>
  </li>
  <li>단/양방향
    <ul>
      <li>단방향(Singly Linked List) : 다음 노드의 주소만 가지고 있는 형태</li>
      <li>양방향(Doubly Linked List) : 이전 노드의 주소도 추가로 가지고 있어 양방향 이동이 가능(메모리 사용량 ↑)</li>
    </ul>
  </li>
</ul>

<h2 id="자바로-linked-list-구현">자바로 Linked List 구현</h2>

<p><a href="https://github.com/warscodev/Algorithm_Study/tree/master/src/dataStructure/linkedList">https://github.com/warscodev/Algorithm_Study/tree/master/src/dataStructure/linkedList</a></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Class</span> <span class="nc">Node</span><span class="o">{</span>
  <span class="kt">int</span> <span class="n">data</span><span class="o">;</span>
  <span class="nc">Node</span> <span class="n">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
  
  <span class="nc">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">d</span><span class="o">){</span>
    <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">d</span><span class="o">;</span>
  <span class="o">}</span>
  
  <span class="kt">void</span> <span class="nf">append</span><span class="o">(</span><span class="kt">int</span> <span class="n">d</span><span class="o">){</span>
    <span class="nc">Node</span> <span class="n">end</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="n">d</span><span class="o">);</span>
    <span class="nc">Node</span> <span class="n">n</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
    
    <span class="k">while</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
      <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="n">n</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">end</span><span class="o">;</span>
  <span class="o">}</span>
  
  <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">d</span><span class="o">){</span>
    <span class="nc">Node</span> <span class="n">n</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
    <span class="k">while</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
      <span class="k">if</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">data</span> <span class="o">==</span> <span class="n">d</span><span class="o">){</span>
        <span class="n">n</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
      <span class="o">}</span><span class="k">else</span><span class="o">{</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>
  
  <span class="kt">void</span> <span class="nf">retrieve</span><span class="o">(){</span>
    <span class="nc">Node</span> <span class="n">n</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
    
    <span class="k">while</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">data</span> <span class="o">+</span> <span class="s">" = "</span><span class="o">);</span>
      <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// 마지막 데이터 출력</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">ptrinln</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">data</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="leetcode-문제">LeetCode 문제</h2>

<p><strong>Intersection of Two Linked Lists :</strong></p>
<ul>
  <li><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/">https://leetcode.com/problems/intersection-of-two-linked-lists/</a></li>
</ul>

<h2><br /></h2>

<p>참고자료 :</p>

<ul>
  <li><a href="https://opentutorials.org/module/1335/8857">https://opentutorials.org/module/1335/8857</a></li>
  <li><a href="https://www.youtube.com/user/damazzang/videos">https://www.youtube.com/user/damazzang/videos</a></li>
</ul>]]></content><author><name>warscodev</name><email>warscodev@gmail.com</email></author><category term="Data Structure" /><category term="Linked List" /><summary type="html"><![CDATA[컴퓨터에 자료를 저장하는 구조의 한 종류로, 엘리먼트와 엘리먼트 간의 연결(link)을 이용해서 리스트를 구현한 것이다. 데이터를 저장한 노드에 다음 노드의 주소를 가지고 있는 구조. 일렬로 연결된 데이터를 저장할 때 사용 배열과 차이 배열 : 물리적으로 한 곳에 정해져 있음. 한번 정해진 크기는 고정. 링크드 리스트 : 길이가 정해져있지 않은 데이터의 연결된 집합 길이가 정해지지 않은 데이터를 핸들링 할 때 유리 ※ 사실 오늘날 어플리케이션 프로그램에서 연결 리스트의 사용 빈도는 많이 줄었습니다. 그 이유는 하드웨어 발전이랑 관련이 있습니다. CPU에 들어가는 캐시 메모리는 연속된 메모리에 접근할 때 굉장히 빠른 속도를 보장합니다. 따라서 이 부분에 있어서 연결 리스트보다는 배열이 더 유리합니다. 그래서 연결 리스트보다는 다른 언어의 다른 자료구조가 더 활용되고 있는데 그 중 하나가 C#언어의 리스트입니다. 다른 말로 동적 배열입니다. 배열로 잡아두고 배열 크기가 커지면 크기만 바뀌는 개념입니다. ㄴ 출처: https://bite-sized-learning.tistory.com/239]]></summary></entry><entry><title type="html">스택(Stack)과 큐(Queue)</title><link href="https://warscodev.github.io/data-structure/%EC%8A%A4%ED%83%9D-stack-%EA%B3%BC-%ED%81%90-queue" rel="alternate" type="text/html" title="스택(Stack)과 큐(Queue)" /><published>2022-05-19T00:00:00+09:00</published><updated>2022-05-19T00:00:00+09:00</updated><id>https://warscodev.github.io/data-structure/%EC%8A%A4%ED%83%9D(Stack)%EA%B3%BC-%ED%81%90(Queue)</id><content type="html" xml:base="https://warscodev.github.io/data-structure/%EC%8A%A4%ED%83%9D-stack-%EA%B3%BC-%ED%81%90-queue"><![CDATA[<h2 id="abstract-data-type--data-structure">Abstract Data Type &amp; Data Structure</h2>

<ul>
  <li>
    <p><strong>ADT(Abstract Data Type)</strong> : 추상 자료형. 개념적으로 어떤 동작이 있는지만 정의하고 구현에 대해서는 다루지 않음</p>
  </li>
  <li>
    <p><strong>DS(Data Structure)</strong> : 자료구조. ADT에서 정의된 동작을 실제로 구현한 것</p>
  </li>
</ul>

<p><br /></p>

<h2 id="stack-vs-queue">Stack vs Queue</h2>

<ul>
  <li><strong>스택(Stack)</strong> : LIFO(Last In First Out) 형태로 데이터를 저장하는 구조. 나중에 들어간 것이 먼저 나옴.
    <ul>
      <li>주요 동작:
        <ul>
          <li>Push : 스택에 아이템을 넣음</li>
          <li>Pop : 스택에서 아이템을 꺼냄</li>
          <li>Peek : 스택 최상단의 아이템을 알아냄</li>
        </ul>
      </li>
      <li>사용 사례 :
        <ul>
          <li>Stack Memory <a href="https://youtu.be/-2YpvLCT5F8?t=306">(영상)</a></li>
          <li>Stack Frame</li>
        </ul>
      </li>
      <li>관련 에러 및 해결
        <ul>
          <li>StackOverflowError : 스택 메모리 공간을 다 썼을 때 발생</li>
          <li>대개 재귀 함수(recursive function)에서 탈출하지 못해서 발생</li>
          <li>탈출 조건을 잘 확인하여 해결</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li><strong>큐(Queue)</strong>: FIFO(Fisrt In First Out) 형태로 데이터를 저장하는 구조. 먼저 들어간 것이 먼저 나옴.
    <ul>
      <li>주요 동작 :
        <ul>
          <li>Enqueue : 큐에 아이템을 넣음</li>
          <li>Dequeue : 큐에서 아이템을 꺼냄</li>
          <li>Peek : 꺼낼 아이템을 알아냄</li>
        </ul>
      </li>
      <li>사용 사례 :
        <ul>
          <li>Producer/Consumer Architecture  <a href="https://youtu.be/-2YpvLCT5F8?t=418">(영상)</a></li>
        </ul>
      </li>
      <li>기술 문서에서 Queue :
        <ul>
          <li>항상 FIFO를 의미 하지는 않음. (Ex.Priority Queue)</li>
        </ul>
      </li>
      <li>관련 에러 및 해결
        <ul>
          <li>OutOfMemoryError : Java의 힙(heap) 메모리를 다 썼을 때 발생</li>
          <li>큐에 데이터가 계속 쌓이기만 한 경우 발생</li>
          <li>큐 사이즈를 고정하여 해결 <br />
            <ul>
              <li>큐가 다 찼다면? :
                <ol>
                  <li>예외 던지기</li>
                  <li>특별한 값(null or false)을 반환</li>
                  <li>성공할 때까지 스레드 블락(대기)</li>
                  <li>제한된 시간동안 블락하고 안되면 제외(Time out)
  <br />ex) LinkedBlockingQueue</li>
                </ol>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />

<p>참고 자료 :</p>

<ul>
  <li><a href="https://www.youtube.com/watch?v=-2YpvLCT5F8">https://www.youtube.com/watch?v=-2YpvLCT5F8</a></li>
</ul>]]></content><author><name>warscodev</name><email>warscodev@gmail.com</email></author><category term="Data Structure" /><category term="Stack" /><category term="Queue" /><summary type="html"><![CDATA[Abstract Data Type &amp; Data Structure]]></summary></entry><entry><title type="html">JPA 영속성 컨텍스트 정리</title><link href="https://warscodev.github.io/spring-data/jpa-%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%A0%95%EB%A6%AC" rel="alternate" type="text/html" title="JPA 영속성 컨텍스트 정리" /><published>2022-05-18T00:00:00+09:00</published><updated>2022-05-18T00:00:00+09:00</updated><id>https://warscodev.github.io/spring-data/JPA-%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%A0%95%EB%A6%AC</id><content type="html" xml:base="https://warscodev.github.io/spring-data/jpa-%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%A0%95%EB%A6%AC"><![CDATA[<h2 id="jpa에서-가장-중요한-2가지">JPA에서 가장 중요한 2가지</h2>
<ol>
  <li>객체와 관계형 데이터베이스 매핑 (Object Relational Mapping)</li>
  <li><strong>영속성 컨텍스트</strong></li>
</ol>

<h2 id="영속성-컨텍스트">영속성 컨텍스트</h2>
<ul>
  <li><strong>엔티티를 영구 저장하는 환경</strong></li>
  <li>논리적 개념</li>
  <li>엔티티 매니저를 통해서 영속성 컨텍스트에 접근<br />
<code class="language-plaintext highlighter-rouge">EntityManager.persist(entity);</code></li>
</ul>

<h2 id="엔티티의-생명주기">엔티티의 생명주기</h2>
<ul>
  <li>
    <p>비영속(new/transition) : 영속성 컨텍스트와 관계가 없는 새로운 상태</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">//객체를 생성한 상태</span>
  <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
  <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="s">"member1"</span><span class="o">);</span>
  <span class="n">member</span><span class="o">.</span><span class="na">setUserId</span><span class="o">(</span><span class="s">"회원1"</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>
    <p><strong>영속(managed)</strong> : 영속성 컨텍스트에 관리되는 상태</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="o">...</span>
  <span class="nc">EntityManagerFactory</span> <span class="n">emf</span> <span class="o">=</span> <span class="nc">Persistence</span><span class="o">.</span><span class="na">createEntityManagerFactory</span><span class="o">(</span><span class="s">"~~"</span><span class="o">);</span>
  <span class="nc">EntityManager</span> <span class="n">em</span> <span class="o">=</span> <span class="n">emf</span><span class="o">.</span><span class="na">createEntityManager</span><span class="o">():</span>
  <span class="n">em</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">().</span><span class="na">begin</span><span class="o">();</span>
    
  <span class="c1">//객체를 저장한 상태(영속)</span>
  <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
</code></pre></div>    </div>

    <ul>
      <li>바로 DB에 저장되는 것은 아님. commit 시점에 db로 쿼리가 전달.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>
    <p>준영속(detached) : 영속성 컨텍스트에 저장되었다 분리된 상태</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">em</span><span class="o">.</span><span class="na">detach</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>
    <p>삭제(removed) : 객체를 삭제한 상태</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">em</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<h2 id="영속성-컨텍스트의-이점">영속성 컨텍스트의 이점</h2>
<ul>
  <li>
    <p><strong>(1) 1차 캐시</strong> → DB 한 트랜잭션 내에서만 공유하기 때문에 일반적인 상황에서 성능적으로 그리 큰 이점은 아니다.</p>
  </li>
  <li>
    <p><strong>(2) 영속 엔티티의 동일성(identity) 보장</strong></p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="o">...</span>
  <span class="nc">Member</span> <span class="n">findMember1</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">1L</span><span class="o">);</span>
  <span class="n">member</span> <span class="n">findMember2</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">1L</span><span class="o">);</span>

  <span class="c1">//true</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"result = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">findMember1</span> <span class="o">==</span> <span class="n">findMember2</span><span class="o">))</span>
</code></pre></div>    </div>
    <p>→ 1차 캐시로 반복 가능한 읽기(Repeatable Read) 등급의 트랜잭션 격리 수준을, 데이터베이스가 아닌 애플리션 차원에서 제공</p>
  </li>
  <li>
    <p><strong>(3) 트랜잭션을 지원하는 쓰기 지연 (transactional wirte-behind)</strong></p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="o">...</span>
  <span class="n">transaction</span><span class="o">().</span><span class="na">begin</span><span class="o">();</span> <span class="c1">// 트랜잭션 시작</span>
      
  <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">memberA</span><span class="o">);</span>
  <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">memberB</span><span class="o">)</span>
  <span class="c1">// 아직 Insert SQL을 DB로 보내지 않음</span>
      
  <span class="n">transation</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span> <span class="c1">// 트랜잭션 커밋</span>
  <span class="c1">// 커밋하는 순간 DB로 Insert SQL을 보냄</span>
</code></pre></div>    </div>
    <p> </p>
  </li>
  <li>
    <p><strong>(4) 변경 감지 (Dirty Checking)</strong></p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="o">...</span>
  <span class="n">transaction</span><span class="o">.</span><span class="na">begin</span><span class="o">();</span> <span class="c1">// 트랜잭션 시작</span>
    
  <span class="c1">// 영속성 엔티티 조회</span>
  <span class="nc">Member</span> <span class="n">memberA</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">1L</span><span class="o">);</span>
    
  <span class="n">memberA</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"newName"</span><span class="o">);</span>
  <span class="n">memberA</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
    
  <span class="c1">// Dirty Checking을 통해 커밋시에 Update SQL이 나감.</span>
    
  <span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">;</span> <span class="c1">// 트랜잭션 커밋</span>
</code></pre></div>    </div>

    <ul>
      <li>영속성 컨텍스트의 커밋 과정:
        <ul>
          <li>① flush()</li>
          <li>② 엔티티와 스냅샷(영속 상태가 된 최초 시점) 비교</li>
          <li>③ 변경된 부분이 있다면 Update Sql을 쓰기 지연 SQL 저장소에 생성</li>
          <li>④ flush()</li>
          <li>⑤ Commit</li>
        </ul>

        <p><br /></p>
      </li>
      <li>플러시(flush)
        <ul>
          <li><u>영속성 컨텍스트의 변경 내용을 데이터베이스에 반영</u>. 트랜잭션 커밋이 발생하면 자동으로 발생.</li>
          <li>플러시 발생 → 변경 감지 → 수정된 엔티티 쓰기지연 SQL 저장소에 등록 → 쓰기지연 SQL 저장소의 쿼리를 DB에 전송</li>
          <li>영속성 컨텍스트를 비우지 않음.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li><strong>(5) 지연 로딩 (Lazy Loading)</strong>
<br />
<br />
<br /></li>
</ul>
<hr />

<p>※ <a href="https://www.inflearn.com/course/ORM-JPA-Basic/dashboard">[인프런] 자바 ORM 표준 JPA 프로그래밍 - 김영한</a></p>]]></content><author><name>warscodev</name><email>warscodev@gmail.com</email></author><category term="Spring Data" /><category term="JPA" /><category term="영속성컨텍스트" /><summary type="html"><![CDATA[JPA에서 가장 중요한 2가지 객체와 관계형 데이터베이스 매핑 (Object Relational Mapping) 영속성 컨텍스트]]></summary></entry><entry><title type="html">프로세스(Process)와 스레드(Thread)</title><link href="https://warscodev.github.io/computer-science/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-process-%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C-thread" rel="alternate" type="text/html" title="프로세스(Process)와 스레드(Thread)" /><published>2022-05-16T00:00:00+09:00</published><updated>2022-05-16T00:00:00+09:00</updated><id>https://warscodev.github.io/computer-science/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4(Process)%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C(Thread)</id><content type="html" xml:base="https://warscodev.github.io/computer-science/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-process-%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C-thread"><![CDATA[<h2 id="1-program">1. Program</h2>
<ul>
  <li>어떤 작업을 위해 실행할 수 있는 파일 (An executable file)</li>
</ul>

<h2 id="2-process">2. Process</h2>
<ul>
  <li>실행중인 프로그램 (Computer program in execution)</li>
  <li>프로세스가 동작한다는 것은 프로세스의 특정 스레드가 실행중이라는 것.<br />
  그 스레드는 프로세스가 가진 데이터를 참조함.
<br /></li>
  <li><strong>구성</strong>
    <ul>
      <li>Register: 명령, 주소 등을 가지고 있는 부분</li>
      <li>Counter: 프로그램 안에서 어느 위치를 실행시키고 있는 지를 가르키는 부분</li>
      <li><strong>Stack</strong>: 프로세스의 메모리 공간을 관리하기 위한 알고리즘중 하나. 호출된 함수, 지역 변수 등의 임시 데이터</li>
      <li><strong>Heap</strong>: 동적으로 생성된 데이터 영역(ex. new Object(), malloc(), …)
        <ul>
          <li>스택보다 할당할 수 있는 메모리 공간이 많다는 것이 장점이지만 포인터로 메모리 영역을 접근해야 하기 때문에 다른 자료구조에 비해서 데이터를 읽고 쓰는게 느리다.</li>
        </ul>
      </li>
      <li><strong>Code</strong>: 프로세스가 실행할 코드와 매크로 상수가 기계어의 형태로 저장된 공간</li>
      <li><strong>Data</strong>: 전역변수 또는 static 변수 등이 저장된 공간.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="3-thread">3. Thread</h2>
<ul>
  <li><strong>프로세스 내에서 실행되는 작업 흐름의 단위.</strong> (The unit of execution within a process)</li>
</ul>

<p><br /></p>

<h2 id="4-process-vs-thread">4. Process vs Thread</h2>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>Process</th>
      <th>Thread</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>개념</strong></td>
      <td>실행 중인 프로그램</td>
      <td>프로세스의 실행 단위</td>
    </tr>
    <tr>
      <td><strong>종료</strong></td>
      <td>시간 소요 ↑</td>
      <td>시간 소요 ↓</td>
    </tr>
    <tr>
      <td><strong>생성</strong></td>
      <td>시간 소요 ↑</td>
      <td>시간 소요 ↓</td>
    </tr>
    <tr>
      <td><strong>Context switching</strong></td>
      <td>시간 소요 ↑</td>
      <td>시간 소요 ↓</td>
    </tr>
    <tr>
      <td><strong>커뮤니케이션</strong></td>
      <td>효율성 ↓</td>
      <td>효율성 ↑</td>
    </tr>
    <tr>
      <td><strong>리소스</strong></td>
      <td>소비 ↑</td>
      <td>소비 ↓</td>
    </tr>
    <tr>
      <td><strong>자원 공유</strong></td>
      <td>독립, 격리</td>
      <td>공유(Heap, Data, Code)</td>
    </tr>
    <tr>
      <td><strong>전환</strong></td>
      <td>운영 체제의 인터페이스를 사용</td>
      <td>운영 체제를 호출하지 않음(커널 중단 X)</td>
    </tr>
  </tbody>
</table>

<h2 id="5-multiprocessing-multithread">5. Multiprocessing, Multithread</h2>
<ul>
  <li>CPU의 최대 활용을 위해 프로그램의 둘 이상의 부분을 동시에 실행하는 기술</li>
</ul>

<h2 id="6-동시성concurrency-vs-병렬성parallelism">6. 동시성(Concurrency) vs 병렬성(Parallelism)</h2>
<ul>
  <li>동시성 - 동시에 실행되는 것 같이 보이는 것. ex)싱글 코어 + 멀티 스레드</li>
  <li>병렬성 - 실제로 동시에 여러 작업이 처리 되는 것. ex)멀티 코어 + 멀티 스레드</li>
</ul>

<h2 id="7-multitasking">7. Multitasking</h2>
<ul>
  <li>task를 번갈아가며 수행하는 것</li>
  <li>프로세스의 응답 시간을 최소화 시키는데 목적</li>
  <li>마치 동시에 여러 프로그램이 실행되는듯 느끼게함</li>
  <li>하나의 프로세스가 동시에 여러 작업을 수행하지는 못함</li>
</ul>

<h2 id="8-context-switching">8. Context Switching</h2>
<ul>
  <li>CPU를 한 프로세스 또는 스레드에서 다른 프로세스 또는 스레드로 전환하는 것</li>
  <li>프로세스 제어 블록(PCB)에서 현재 실행중인 프로세스의 상태(Context)를 먼저 저장하고, 다음 프로세스를 동작시켜 작업을 처리한 후에 이전에 저장된 프로세스의 상태를 다시 복구하여 재개</li>
  <li>이를 통해 여러 프로세스가 단일 CPU를 공유</li>
</ul>

<h2 id="9-multiprocessing">9. Multiprocessing</h2>
<ul>
  <li>두개 이상의 프로세서나 코어가 작업을 병렬처리하는 것</li>
  <li>각 프로세스가 메모리 영역을 따로 가지기 때문에 비효율이 발생</li>
</ul>

<h2 id="10-multithread">10. Multithread</h2>
<ul>
  <li>하나의 프로세스가 다수의 작업을 각각의 스레드를 이용하여 동시에 작동 시킬 수 있다</li>
  <li>공유 메모리(Code, Data, Heap)를 가지기 때문에 서로간의 자원 공유가 가능하여 프로세스간 통신과 같은 과정을 거치지 않아 효율적이다</li>
  <li>같은 데이터를 공유하기 때문에 데이터 동기화에 신경 써야 한다. 한 프로세스 안의 스레드가  문제가 생기면 같은 프로세스안의 다른 스레드도 문제가 발생하게 된다</li>
</ul>

<p><br /></p>

<hr />

<p>참고 자료 :</p>
<ul>
  <li><a href="https://www.youtube.com/watch?v=QmtYKZC0lMU">https://www.youtube.com/watch?v=QmtYKZC0lMU</a></li>
  <li><a href="https://www.youtube.com/watch?v=RrfASw-jfZ4&amp;t=28s">https://www.youtube.com/watch?v=RrfASw-jfZ4&amp;t=28s</a></li>
  <li><a href="https://www.youtube.com/watch?v=dzfij2nZbRw">https://www.youtube.com/watch?v=dzfij2nZbRw</a></li>
  <li><a href="https://mangkyu.tistory.com/92">https://mangkyu.tistory.com/92</a></li>
</ul>]]></content><author><name>warscodev</name><email>warscodev@gmail.com</email></author><category term="Computer Science" /><category term="Process" /><category term="Thread" /><summary type="html"><![CDATA[1. Program 어떤 작업을 위해 실행할 수 있는 파일 (An executable file)]]></summary></entry></feed>